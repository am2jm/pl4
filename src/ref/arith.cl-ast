7
7
A
no_inherits
8
attribute_init
9
var
9
Int
9
integer
0
method
11
value
0
11
Int
11
identifier
11
var
method
13
set_var
1
13
num
13
Int
13
SELF_TYPE
14
block
2
15
assign
15
var
15
identifier
15
num
16
identifier
16
self
method
20
method1
1
20
num
20
Int
20
SELF_TYPE
21
identifier
21
self
method
24
method2
2
24
num1
24
Int
24
num2
24
Int
24
B
25
let
1
let_binding_no_init
25
x
25
Int
26
block
2
27
assign
27
x
27
plus
27
identifier
27
num1
27
identifier
27
num2
28
dynamic_dispatch
28
new
28
B
28
set_var
1
28
identifier
28
x
method
33
method3
1
33
num
33
Int
33
C
34
let
1
let_binding_no_init
34
x
34
Int
35
block
2
36
assign
36
x
36
negate
36
identifier
36
num
37
dynamic_dispatch
37
new
37
C
37
set_var
1
37
identifier
37
x
method
42
method4
2
42
num1
42
Int
42
num2
42
Int
42
D
43
if
43
lt
43
identifier
43
num2
43
identifier
43
num1
44
let
1
let_binding_no_init
44
x
44
Int
45
block
2
46
assign
46
x
46
minus
46
identifier
46
num1
46
identifier
46
num2
47
dynamic_dispatch
47
new
47
D
47
set_var
1
47
identifier
47
x
51
let
1
let_binding_no_init
51
x
51
Int
52
block
2
53
assign
53
x
53
minus
53
identifier
53
num2
53
identifier
53
num1
54
dynamic_dispatch
54
new
54
D
54
set_var
1
54
identifier
54
x
method
60
method5
1
60
num
60
Int
60
E
61
let
1
let_binding_init
61
x
61
Int
61
integer
1
62
block
2
63
let
1
let_binding_init
63
y
63
Int
63
integer
1
64
while
64
le
64
identifier
64
y
64
identifier
64
num
65
block
2
66
assign
66
x
66
times
66
identifier
66
x
66
identifier
66
y
67
assign
67
y
67
plus
67
identifier
67
y
67
integer
1
71
dynamic_dispatch
71
new
71
E
71
set_var
1
71
identifier
71
x
78
B
inherits
78
A
1
method
80
method5
1
80
num
80
Int
80
E
81
let
1
let_binding_no_init
81
x
81
Int
82
block
2
83
assign
83
x
83
times
83
identifier
83
num
83
identifier
83
num
84
dynamic_dispatch
84
new
84
E
84
set_var
1
84
identifier
84
x
91
C
inherits
91
B
2
method
93
method6
1
93
num
93
Int
93
A
94
block
2
95
let
1
let_binding_no_init
95
p
95
Int
96
block
1
97
dynamic_dispatch
97
new
97
A
97
set_var
1
97
identifier
97
var
100
identifier
100
p
method
104
method5
1
104
num
104
Int
104
E
105
let
1
let_binding_no_init
105
x
105
Int
106
block
2
107
assign
107
x
107
times
107
times
107
identifier
107
num
107
identifier
107
num
107
identifier
107
num
108
dynamic_dispatch
108
new
108
E
108
set_var
1
108
identifier
108
x
115
D
inherits
115
B
1
method
117
method7
1
117
num
117
Int
117
Bool
118
let
1
let_binding_init
118
x
118
Int
118
identifier
118
num
119
if
119
lt
119
identifier
119
x
119
integer
0
119
self_dispatch
119
method7
1
119
negate
119
identifier
119
x
120
if
120
eq
120
integer
0
120
identifier
120
x
120
true
121
if
121
eq
121
integer
1
121
identifier
121
x
121
false
122
if
122
eq
122
integer
2
122
identifier
122
x
122
false
123
self_dispatch
123
method7
1
123
minus
123
identifier
123
x
123
integer
3
130
E
inherits
130
D
1
method
132
method6
1
132
num
132
Int
132
A
133
let
1
let_binding_no_init
133
x
133
Int
134
block
2
135
assign
135
x
135
divide
135
identifier
135
num
135
integer
8
136
dynamic_dispatch
136
new
136
A
136
set_var
1
136
identifier
136
x
157
A2I
no_inherits
6
method
159
c2i
1
159
char
159
String
159
Int
160
if
160
eq
160
identifier
160
char
160
string
0
160
integer
0
161
if
161
eq
161
identifier
161
char
161
string
1
161
integer
1
162
if
162
eq
162
identifier
162
char
162
string
2
162
integer
2
163
if
163
eq
163
identifier
163
char
163
string
3
163
integer
3
164
if
164
eq
164
identifier
164
char
164
string
4
164
integer
4
165
if
165
eq
165
identifier
165
char
165
string
5
165
integer
5
166
if
166
eq
166
identifier
166
char
166
string
6
166
integer
6
167
if
167
eq
167
identifier
167
char
167
string
7
167
integer
7
168
if
168
eq
168
identifier
168
char
168
string
8
168
integer
8
169
if
169
eq
169
identifier
169
char
169
string
9
169
integer
9
170
block
2
170
self_dispatch
170
abort
0
170
integer
0
method
178
i2c
1
178
i
178
Int
178
String
179
if
179
eq
179
identifier
179
i
179
integer
0
179
string
0
180
if
180
eq
180
identifier
180
i
180
integer
1
180
string
1
181
if
181
eq
181
identifier
181
i
181
integer
2
181
string
2
182
if
182
eq
182
identifier
182
i
182
integer
3
182
string
3
183
if
183
eq
183
identifier
183
i
183
integer
4
183
string
4
184
if
184
eq
184
identifier
184
i
184
integer
5
184
string
5
185
if
185
eq
185
identifier
185
i
185
integer
6
185
string
6
186
if
186
eq
186
identifier
186
i
186
integer
7
186
string
7
187
if
187
eq
187
identifier
187
i
187
integer
8
187
string
8
188
if
188
eq
188
identifier
188
i
188
integer
9
188
string
9
189
block
2
189
self_dispatch
189
abort
0
189
string

method
201
a2i
1
201
s
201
String
201
Int
202
if
202
eq
202
dynamic_dispatch
202
identifier
202
s
202
length
0
202
integer
0
202
integer
0
203
if
203
eq
203
dynamic_dispatch
203
identifier
203
s
203
substr
2
203
integer
0
203
integer
1
203
string
-
203
negate
203
self_dispatch
203
a2i_aux
1
203
dynamic_dispatch
203
identifier
203
s
203
substr
2
203
integer
1
203
minus
203
dynamic_dispatch
203
identifier
203
s
203
length
0
203
integer
1
204
if
204
eq
204
dynamic_dispatch
204
identifier
204
s
204
substr
2
204
integer
0
204
integer
1
204
string
+
204
self_dispatch
204
a2i_aux
1
204
dynamic_dispatch
204
identifier
204
s
204
substr
2
204
integer
1
204
minus
204
dynamic_dispatch
204
identifier
204
s
204
length
0
204
integer
1
205
self_dispatch
205
a2i_aux
1
205
identifier
205
s
method
213
a2i_aux
1
213
s
213
String
213
Int
214
let
1
let_binding_init
214
int
214
Int
214
integer
0
215
block
2
216
let
1
let_binding_init
216
j
216
Int
216
dynamic_dispatch
216
identifier
216
s
216
length
0
217
let
1
let_binding_init
217
i
217
Int
217
integer
0
218
while
218
lt
218
identifier
218
i
218
identifier
218
j
219
block
2
220
assign
220
int
220
plus
220
times
220
identifier
220
int
220
integer
10
220
self_dispatch
220
c2i
1
220
dynamic_dispatch
220
identifier
220
s
220
substr
2
220
identifier
220
i
220
integer
1
221
assign
221
i
221
plus
221
identifier
221
i
221
integer
1
226
identifier
226
int
method
234
i2a
1
234
i
234
Int
234
String
235
if
235
eq
235
identifier
235
i
235
integer
0
235
string
0
236
if
236
lt
236
integer
0
236
identifier
236
i
236
self_dispatch
236
i2a_aux
1
236
identifier
236
i
237
dynamic_dispatch
237
string
-
237
concat
1
237
self_dispatch
237
i2a_aux
1
237
times
237
identifier
237
i
237
negate
237
integer
1
method
243
i2a_aux
1
243
i
243
Int
243
String
244
if
244
eq
244
identifier
244
i
244
integer
0
244
string

245
let
1
let_binding_init
245
next
245
Int
245
divide
245
identifier
245
i
245
integer
10
246
dynamic_dispatch
246
self_dispatch
246
i2a_aux
1
246
identifier
246
next
246
concat
1
246
self_dispatch
246
i2c
1
246
minus
246
identifier
246
i
246
times
246
identifier
246
next
246
integer
10
253
Main
inherits
253
IO
11
attribute_no_init
255
char
255
String
attribute_no_init
256
avar
256
A
attribute_no_init
257
a_var
257
A
attribute_init
258
flag
258
Bool
258
true
method
261
menu
0
261
String
262
block
27
263
self_dispatch
263
out_string
1
263
string
\n\tTo add a number to 
264
self_dispatch
264
print
1
264
identifier
264
avar
265
self_dispatch
265
out_string
1
265
string
...enter a:\n
266
self_dispatch
266
out_string
1
266
string
\tTo negate 
267
self_dispatch
267
print
1
267
identifier
267
avar
268
self_dispatch
268
out_string
1
268
string
...enter b:\n
269
self_dispatch
269
out_string
1
269
string
\tTo find the difference between 
270
self_dispatch
270
print
1
270
identifier
270
avar
271
self_dispatch
271
out_string
1
271
string
and another number...enter c:\n
272
self_dispatch
272
out_string
1
272
string
\tTo find the factorial of 
273
self_dispatch
273
print
1
273
identifier
273
avar
274
self_dispatch
274
out_string
1
274
string
...enter d:\n
275
self_dispatch
275
out_string
1
275
string
\tTo square 
276
self_dispatch
276
print
1
276
identifier
276
avar
277
self_dispatch
277
out_string
1
277
string
...enter e:\n
278
self_dispatch
278
out_string
1
278
string
\tTo cube 
279
self_dispatch
279
print
1
279
identifier
279
avar
280
self_dispatch
280
out_string
1
280
string
...enter f:\n
281
self_dispatch
281
out_string
1
281
string
\tTo find out if 
282
self_dispatch
282
print
1
282
identifier
282
avar
283
self_dispatch
283
out_string
1
283
string
is a multiple of 3...enter g:\n
284
self_dispatch
284
out_string
1
284
string
\tTo divide 
285
self_dispatch
285
print
1
285
identifier
285
avar
286
self_dispatch
286
out_string
1
286
string
by 8...enter h:\n
287
self_dispatch
287
out_string
1
287
string
\tTo get a new number...enter j:\n
288
self_dispatch
288
out_string
1
288
string
\tTo quit...enter q:\n\n
289
self_dispatch
289
in_string
0
method
293
prompt
0
293
String
294
block
3
295
self_dispatch
295
out_string
1
295
string
\n
296
self_dispatch
296
out_string
1
296
string
Please enter a number...  
297
self_dispatch
297
in_string
0
method
301
get_int
0
301
Int
302
block
1
303
let
1
let_binding_init
303
z
303
A2I
303
new
303
A2I
304
let
1
let_binding_init
304
s
304
String
304
self_dispatch
304
prompt
0
305
dynamic_dispatch
305
identifier
305
z
305
a2i
1
305
identifier
305
s
method
311
is_even
1
311
num
311
Int
311
Bool
312
let
1
let_binding_init
312
x
312
Int
312
identifier
312
num
313
if
313
lt
313
identifier
313
x
313
integer
0
313
self_dispatch
313
is_even
1
313
negate
313
identifier
313
x
314
if
314
eq
314
integer
0
314
identifier
314
x
314
true
315
if
315
eq
315
integer
1
315
identifier
315
x
315
false
316
self_dispatch
316
is_even
1
316
minus
316
identifier
316
x
316
integer
2
method
321
class_type
1
321
var
321
A
321
SELF_TYPE
322
case
322
identifier
322
var
6
323
a
323
A
323
self_dispatch
323
out_string
1
323
string
Class type is now A\n
324
b
324
B
324
self_dispatch
324
out_string
1
324
string
Class type is now B\n
325
c
325
C
325
self_dispatch
325
out_string
1
325
string
Class type is now C\n
326
d
326
D
326
self_dispatch
326
out_string
1
326
string
Class type is now D\n
327
e
327
E
327
self_dispatch
327
out_string
1
327
string
Class type is now E\n
328
o
328
Object
328
self_dispatch
328
out_string
1
328
string
Oooops\n
method
332
print
1
332
var
332
A
332
SELF_TYPE
333
let
1
let_binding_init
333
z
333
A2I
333
new
333
A2I
334
block
2
335
self_dispatch
335
out_string
1
335
dynamic_dispatch
335
identifier
335
z
335
i2a
1
335
dynamic_dispatch
335
identifier
335
var
335
value
0
336
self_dispatch
336
out_string
1
336
string
 
method
341
main
0
341
Object
342
block
2
343
assign
343
avar
343
new
343
A
344
while
344
identifier
344
flag
345
block
6
347
self_dispatch
347
out_string
1
347
string
number 
348
self_dispatch
348
print
1
348
identifier
348
avar
349
if
349
self_dispatch
349
is_even
1
349
dynamic_dispatch
349
identifier
349
avar
349
value
0
350
self_dispatch
350
out_string
1
350
string
is even!\n
352
self_dispatch
352
out_string
1
352
string
is odd!\n
355
self_dispatch
355
class_type
1
355
identifier
355
avar
356
assign
356
char
356
self_dispatch
356
menu
0
357
if
357
eq
357
identifier
357
char
357
string
a
358
block
2
359
assign
359
a_var
359
dynamic_dispatch
359
new
359
A
359
set_var
1
359
self_dispatch
359
get_int
0
360
assign
360
avar
360
dynamic_dispatch
360
new
360
B
360
method2
2
360
dynamic_dispatch
360
identifier
360
avar
360
value
0
360
dynamic_dispatch
360
identifier
360
a_var
360
value
0
362
if
362
eq
362
identifier
362
char
362
string
b
363
case
363
identifier
363
avar
3
364
c
364
C
364
assign
364
avar
364
dynamic_dispatch
364
identifier
364
c
364
method6
1
364
dynamic_dispatch
364
identifier
364
c
364
value
0
365
a
365
A
365
assign
365
avar
365
dynamic_dispatch
365
identifier
365
a
365
method3
1
365
dynamic_dispatch
365
identifier
365
a
365
value
0
366
o
366
Object
366
block
3
367
self_dispatch
367
out_string
1
367
string
Oooops\n
368
self_dispatch
368
abort
0
368
integer
0
371
if
371
eq
371
identifier
371
char
371
string
c
372
block
2
373
assign
373
a_var
373
dynamic_dispatch
373
new
373
A
373
set_var
1
373
self_dispatch
373
get_int
0
374
assign
374
avar
374
dynamic_dispatch
374
new
374
D
374
method4
2
374
dynamic_dispatch
374
identifier
374
avar
374
value
0
374
dynamic_dispatch
374
identifier
374
a_var
374
value
0
376
if
376
eq
376
identifier
376
char
376
string
d
376
assign
376
avar
376
static_dispatch
376
new
376
C
376
A
376
method5
1
376
dynamic_dispatch
376
identifier
376
avar
376
value
0
378
if
378
eq
378
identifier
378
char
378
string
e
378
assign
378
avar
378
static_dispatch
378
new
378
C
378
B
378
method5
1
378
dynamic_dispatch
378
identifier
378
avar
378
value
0
380
if
380
eq
380
identifier
380
char
380
string
f
380
assign
380
avar
380
static_dispatch
380
new
380
C
380
C
380
method5
1
380
dynamic_dispatch
380
identifier
380
avar
380
value
0
382
if
382
eq
382
identifier
382
char
382
string
g
383
if
383
dynamic_dispatch
383
new
383
D
383
method7
1
383
dynamic_dispatch
383
identifier
383
avar
383
value
0
385
block
3
386
self_dispatch
386
out_string
1
386
string
number 
387
self_dispatch
387
print
1
387
identifier
387
avar
388
self_dispatch
388
out_string
1
388
string
is divisible by 3.\n
391
block
3
392
self_dispatch
392
out_string
1
392
string
number 
393
self_dispatch
393
print
1
393
identifier
393
avar
394
self_dispatch
394
out_string
1
394
string
is not divisible by 3.\n
397
if
397
eq
397
identifier
397
char
397
string
h
398
let
1
let_binding_no_init
398
x
398
A
399
block
3
400
assign
400
x
400
dynamic_dispatch
400
new
400
E
400
method6
1
400
dynamic_dispatch
400
identifier
400
avar
400
value
0
401
let
1
let_binding_init
401
r
401
Int
401
minus
401
dynamic_dispatch
401
identifier
401
avar
401
value
0
401
times
401
dynamic_dispatch
401
identifier
401
x
401
value
0
401
integer
8
402
block
6
403
self_dispatch
403
out_string
1
403
string
number 
404
self_dispatch
404
print
1
404
identifier
404
avar
405
self_dispatch
405
out_string
1
405
string
is equal to 
406
self_dispatch
406
print
1
406
identifier
406
x
407
self_dispatch
407
out_string
1
407
string
times 8 with a remainder of 
408
let
1
let_binding_init
408
a
408
A2I
408
new
408
A2I
409
block
2
410
self_dispatch
410
out_string
1
410
dynamic_dispatch
410
identifier
410
a
410
i2a
1
410
identifier
410
r
411
self_dispatch
411
out_string
1
411
string
\n
416
assign
416
avar
416
identifier
416
x
420
if
420
eq
420
identifier
420
char
420
string
j
420
assign
420
avar
420
new
420
A
422
if
422
eq
422
identifier
422
char
422
string
q
422
assign
422
flag
422
false
424
assign
424
avar
424
dynamic_dispatch
424
new
424
A
424
method1
1
424
dynamic_dispatch
424
identifier
424
avar
424
value
0
